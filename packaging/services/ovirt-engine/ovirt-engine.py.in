#!/usr/bin/python@PY_VERSION@

#
# Copyright oVirt Authors
# SPDX-License-Identifier: Apache-2.0
#


import gettext
import os
import re
import shlex
import subprocess
import sys

from jinja2 import Template

import config


from ovirt_engine import configfile
from ovirt_engine import java
from ovirt_engine import mem
from ovirt_engine import service


def _(m):
    return gettext.dgettext(message=m, domain='ovirt-engine')


class Daemon(service.Daemon):

    _JBOSS_VERSION_REGEX = re.compile(
        flags=re.VERBOSE,
        pattern=r"""
            ^
            [^\d]*
            (?P<major>\d+)
            \.
            (?P<minor>\d+)
            \.
            (?P<revision>\d+)
            .*
        """,
    )

    def __init__(self):
        super(Daemon, self).__init__()
        self._config = None
        self._engine_args = None
        self._engine_env = None
        self._executable = None
        self._temp_dir = None
        self._jboss_runtime = None
        self._jboss_version = None
        self._jboss_config_file = None
        self._defaults = os.path.abspath(
            os.path.join(
                os.path.dirname(sys.argv[0]),
                'ovirt-engine.conf',
            )
        )

    def _processTemplate(self, template, dir, mode=None):
        out = os.path.join(
            dir,
            re.sub('\.in$', '', os.path.basename(template)),
        )
        with open(template, 'r', encoding='utf-8') as f:
            t = Template(f.read())
        with open(out, 'w', encoding='utf-8') as f:
            if mode is not None:
                os.chmod(out, mode)
            f.write(
                t.render(
                    config=self._config,
                    jboss_version=self._jboss_version,
                    jboss_runtime=self._jboss_runtime.directory,
                )
            )
        return out

    def _checkInstallation(
        self,
        pidfile,
        jbossModulesJar,
    ):
        # Check the required JBoss directories and files:
        self.check(
            name=self._config.get('JBOSS_HOME'),
            directory=True,
        )
        self.check(
            name=jbossModulesJar,
        )

        # Check the required engine directories and files:
        self.check(
            os.path.join(
                self._config.get('ENGINE_USR'),
                'services',
            ),
            directory=True,
        )
        self.check(
            self._config.get('ENGINE_CACHE'),
            directory=True,
            writable=True,
        )
        self.check(
            self._config.get('ENGINE_TMP'),
            directory=True,
            writable=True,
            mustExist=False,
        )
        self.check(
            self._config.get('ENGINE_LOG'),
            directory=True,
            writable=True,
        )
        self.check(
            name=os.path.join(
                self._config.get("ENGINE_LOG"),
                'ova',
            ),
            directory=True,
            writable=True,
        )
        self.check(
            name=os.path.join(
                self._config.get("ENGINE_LOG"),
                'host-deploy',
            ),
            directory=True,
            writable=True,
        )
        for log in ('engine.log', 'console.log', 'server.log'):
            self.check(
                name=os.path.join(self._config.get("ENGINE_LOG"), log),
                mustExist=False,
                writable=True,
            )
        if pidfile is not None:
            self.check(
                name=pidfile,
                writable=True,
                mustExist=False,
            )

    def _setupEngineApps(self):

        deployments_dir = os.path.join(
            self._jboss_runtime.directory,
            'deployments',
        )
        os.mkdir(deployments_dir)

        # The list of applications to be deployed:
        for engine_app_dir in shlex.split(self._config.get('ENGINE_APPS')):
            self.logger.debug('Deploying: %s', engine_app_dir)
            if not os.path.isabs(engine_app_dir):
                engine_app_dir = os.path.join(
                    self._config.get('ENGINE_USR'),
                    engine_app_dir,
                )
            if not os.path.exists(engine_app_dir):
                self.logger.warning(
                    _(
                        "Application directory '{directory}' "
                        "does not exist, it will be ignored"
                    ).format(
                        directory=engine_app_dir,
                    ),
                )
                continue

            engine_app_link = os.path.join(
                deployments_dir,
                os.path.basename(engine_app_dir),
            )
            os.symlink(engine_app_dir, engine_app_link)
            with open('%s.dodeploy' % engine_app_link, 'w', encoding='utf-8'):
                pass

    def _detectJBossVersion(self):
        args = ['ovirt-engine-version'] + self._engine_args + ['-v']
        self.logger.info(
            "Detecting JBoss version. Running: {exe} {args}".format(
                exe=self._executable,
                args=args,
            )
        )
        proc = subprocess.Popen(
            executable=self._executable,
            args=args,
            env=self._engine_env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            close_fds=True,
        )

        stdout, stderr = proc.communicate()
        stdout = stdout.decode('utf-8', 'replace').splitlines()
        stderr = stderr.decode('utf-8', 'replace').splitlines()

        self.logger.info(
            "Return code: %s, \nstdout: '%s, \nstderr: '%s'",
            proc.returncode,
            stdout,
            stderr,
        )

        for line in stdout:
            match = self._JBOSS_VERSION_REGEX.match(line)
            if match is not None:
                self._jboss_version = {
                    'JBOSS_MAJOR': int(match.group('major')),
                    'JBOSS_MINOR': int(match.group('minor')),
                    'JBOSS_REVISION': int(match.group('revision')),
                }
                break
        else:
            raise RuntimeError(_('Cannot detect JBoss version'))

        self.logger.debug(
            "Detected JBoss version: %s",
            self._jboss_version,
        )

    def daemonSetup(self):

        if os.geteuid() == 0:
            raise RuntimeError(
                _('This service cannot be executed as root')
            )

        if not os.path.exists(self._defaults):
            raise RuntimeError(
                _(
                    "The configuration defaults file '{file}' "
                    "required but missing"
                ).format(
                    file=self._defaults,
                )
            )

        self._config = configfile.ConfigFile(
            (
                self._defaults,
                config.ENGINE_VARS,
            ),
        )

        #
        # the earliest so we can abort early.
        #
        self._executable = os.path.join(
            java.Java().getJavaHome(),
            'bin',
            'java',
        )

        jboss_modules_jar = os.path.join(
            self._config.get('JBOSS_HOME'),
            'jboss-modules.jar',
        )

        self._checkInstallation(
            pidfile=self.pidfile,
            jbossModulesJar=jboss_modules_jar,
        )

        self._temp_dir = service.TempDir(self._config.get('ENGINE_TMP'))
        self._temp_dir.create()

        self._jboss_runtime = service.TempDir(self._config.get('JBOSS_RUNTIME'))
        self._jboss_runtime.create()

        self._setupEngineApps()

        jboss_temp_dir = os.path.join(
            self._jboss_runtime.directory,
            'tmp',
        )

        jboss_config_dir = os.path.join(
            self._jboss_runtime.directory,
            'config',
        )

        java_module_path = '%s:%s' % (
            self._config.get('ENGINE_JAVA_MODULEPATH'),
            os.path.join(
                self._config.get('JBOSS_HOME'),
                'modules',
            ),
        )

        os.mkdir(jboss_temp_dir)
        os.mkdir(jboss_config_dir)
        os.chmod(jboss_config_dir, 0o700)

        jboss_boot_logging_file = self._processTemplate(
            template=os.path.join(
                os.path.dirname(sys.argv[0]),
                'ovirt-engine-logging.properties.in'
            ),
            dir=jboss_config_dir,
        )


        keycloak_add_user_file = os.path.join(
            os.path.dirname(sys.argv[0]),
            'keycloak-add-user.json'
        )
        if os.path.exists(keycloak_add_user_file):
            keycloakInitialAdminUserConfigFile = self._processTemplate(
                template=keycloak_add_user_file,
                dir=jboss_config_dir,
                mode=0o600,
            )

        # We start with an empty list of arguments:
        self._engine_args = []

        # since java-11, add se module
        self._engine_args.extend(['--add-modules', 'java.se'])
        self._engine_args.extend(['--add-modules', 'java.naming'])
        self._engine_args.extend(['--add-modules', 'jdk.naming.dns'])

        # since java-17, add exports and opens
        self._engine_args.extend(['--add-exports', 'java.naming/com.sun.jndi.ldap=ALL-UNNAMED'])
        self._engine_args.extend(['--add-exports', 'jdk.naming.dns/com.sun.jndi.dns=ALL-UNNAMED'])
        self._engine_args.extend(['--add-opens', 'java.base/java.util=ALL-UNNAMED'])
        self._engine_args.extend(['--add-opens', 'java.base/java.lang=ALL-UNNAMED'])

        # HEAP size
        heap_min_conf = self._config.get('ENGINE_HEAP_MIN')
        heap_max_conf = self._config.get('ENGINE_HEAP_MAX')

        # Thread Stack size
        thread_stack_conf = self._config.get('ENGINE_THREAD_STACK')

        if not self._config.getboolean('ENFORCE_ENGINE_HEAP_PARAMS'):
            total = mem.get_total_mb()

            # Do not allow more than available memory
            if mem.javaX_mb(heap_min_conf) > total:
                new_min = total * 9 // 10
                self.logger.warning(
                    "ENGINE_HEAP_MIN is [%s], total available memory is %s "
                    "MB. Setting to %s MB.",
                    heap_min_conf,
                    total,
                    new_min,
                )
                heap_min_conf = '%sM' % new_min
            if mem.javaX_mb(heap_max_conf) > total:
                new_max = total * 9 // 10
                self.logger.warning(
                    "ENGINE_HEAP_MAX is [%s], total available memory is %s "
                    "MB. Setting to %s MB.",
                    heap_max_conf,
                    total,
                    new_max,
                )
                heap_max_conf = '%sM' % new_max

        # Add arguments for the java virtual machine:
        self._engine_args.extend([
            # Virtual machine options:
            '-server',
            '-XX:+TieredCompilation',
            '-Xms%s' % heap_min_conf,
            '-Xmx%s' % heap_max_conf,
            '-Xss%s' % thread_stack_conf,
        ])

        # Add extra system properties provided in the configuration:
        for engineProperty in shlex.split(
            self._config.get('ENGINE_PROPERTIES')
        ):
            if not engineProperty.startswith('-D'):
                engineProperty = '-D' + engineProperty
            self._engine_args.append(engineProperty)

        # Add extra jvm arguments provided in the configuration:
        for arg in shlex.split(self._config.get('ENGINE_JVM_ARGS')):
            self._engine_args.append(arg)

        # Enable verbose garbage collection if required:
        if self._config.getboolean('ENGINE_VERBOSE_GC'):
            self._engine_args.extend([
                '-Xlog:gc*=%s:file=%s/gc.log:time,uptime,level,tags:filesize=%s,filecount=%s' % (
                    self._config.get('ENGINE_VERBOSE_GC_LOG_LEVEL'),
                    self._config.get('ENGINE_LOG'),
                    self._config.get('ENGINE_VERBOSE_GC_LOG_FILE_SIZE'),
                    self._config.get('ENGINE_VERBOSE_GC_LOG_FILES_NUMBER'),
                )
            ])

        # Specify special krb5.conf file if required
        if self._config.get('AAA_KRB5_CONF_FILE'):
            self._engine_args.append(
                '-Djava.security.krb5.conf=%s' % self._config.get(
                    'AAA_KRB5_CONF_FILE'
                )
            )

        # Add arguments for JBoss:
        self._engine_args.extend([
            '-Djava.util.logging.manager=org.jboss.logmanager',
            '-Dlogging.configuration=file://%s' % jboss_boot_logging_file,
            '-Dorg.jboss.resolver.warning=true',
            '-Djboss.modules.system.pkgs=org.jboss.byteman',
            '-Djboss.server.default.config=ovirt-engine',
            '-Djboss.home.dir=%s' % self._config.get(
                'JBOSS_HOME'
            ),
            '-Djboss.server.base.dir=%s' % self._config.get(
                'ENGINE_USR'
            ),
            '-Djboss.server.data.dir=%s' % self._config.get(
                'ENGINE_VAR'
            ),
            '-Djboss.server.log.dir=%s' % self._config.get(
                'ENGINE_LOG'
            ),
            '-Djboss.server.config.dir=%s' % jboss_config_dir,
            '-Djboss.server.temp.dir=%s' % jboss_temp_dir,
            '-Djboss.controller.temp.dir=%s' % jboss_temp_dir,
            '-jar', jboss_modules_jar,
            '-mp', java_module_path,
            '-jaxpmodule', 'javax.xml.jaxp-provider',
            'org.jboss.as.standalone',
        ])

        self._engine_env = os.environ.copy()
        self._engine_env.update({
            'PATH': (
                '/usr/local/sbin:/usr/local/bin:'
                '/usr/sbin:/usr/bin:/sbin:/bin'
            ),
            'LANG': 'en_US.UTF-8',
            'LC_ALL': 'en_US.UTF-8',
            'ENGINE_DEFAULTS': self._defaults,
            'ENGINE_VARS': config.ENGINE_VARS,
            'ENGINE_ETC': self._config.get('ENGINE_ETC'),
            'ENGINE_LOG': self._config.get('ENGINE_LOG'),
            'ENGINE_TMP': self._temp_dir.directory,
            'ENGINE_USR': self._config.get('ENGINE_USR'),
            'ENGINE_VAR': self._config.get('ENGINE_VAR'),
            'ENGINE_CACHE': self._config.get('ENGINE_CACHE'),
            'MALLOC_ARENA_MAX': self._config.get('ENGINE_MALLOC_ARENA_MAX'),
        })

        self._detectJBossVersion()

        self._jboss_config_file = self._processTemplate(
            template=os.path.join(
                os.path.dirname(sys.argv[0]),
                'ovirt-engine.xml.in',
            ),
            dir=jboss_config_dir,
            mode=0o600,
        )

    def daemonStdHandles(self):
        consoleLog = open(
            os.path.join(
                self._config.get('ENGINE_LOG'),
                'console.log'
            ),
            'w+',
            encoding='utf-8'
        )
        return (consoleLog, consoleLog)

    def daemonContext(self):
        try:
            #
            # create mark file to be used by notifier service
            #
            with open(self._config.get('ENGINE_UP_MARK'), 'w', encoding='utf-8') as f:
                f.write('%s\n' % os.getpid())

            #
            # NOTE:
            # jdwp must be set only for the process we are trying
            # to debug, as jvm will open it and conflict with other
            # instances.
            #
            self.daemonAsExternalProcess(
                executable=self._executable,
                args=(
                    ['ovirt-engine'] +
                    ([(
                        '-agentlib:jdwp=transport=dt_socket,address=%s,'
                        'server=y,suspend=n'
                    ) % (
                        self._config.get('ENGINE_DEBUG_ADDRESS')
                    )] if self._config.get('ENGINE_DEBUG_ADDRESS') else []) +
                    self._engine_args +
                    ['-c', os.path.basename(self._jboss_config_file)]
                ),
                env=self._engine_env,
                stopTime=self._config.getinteger(
                    'ENGINE_STOP_TIME'
                ),
                stopInterval=self._config.getinteger(
                    'ENGINE_STOP_INTERVAL'
                ),
            )

            raise self.TerminateException()

        except self.TerminateException:
            if os.path.exists(self._config.get('ENGINE_UP_MARK')):
                os.remove(self._config.get('ENGINE_UP_MARK'))

    def daemonCleanup(self):
        if self._temp_dir:
            self._temp_dir.destroy()
        if self._jboss_runtime:
            self._jboss_runtime.destroy()


if __name__ == '__main__':
    service.setupLogger()
    d = Daemon()
    d.run()


# vim: expandtab tabstop=4 shiftwidth=4
